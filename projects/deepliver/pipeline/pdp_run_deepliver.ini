; template for PiedPiper run configuration files

[Run]
load_path= /home/pebert/work/code/mpggit/collaborations/projects/deepliver
load_name= pipeline.ppl_project_deepliver

[Refdata]
basedir= /TL/deep/fhgfs/projects/pebert/thesis/refdata
chromsizes= ${basedir}/chromsizes/chrom_augo

[DataSource]
human= /TL/deep-open-chromatin/archive00/DEEP/human/GRCh37/41
mouse= /TL/deep-open-chromatin/archive00/DEEP/mouse/GRCm38/41

[NucHunter]
javabase= java -XX:ParallelGCThreads=2 -jar
fitparams= ${javabase} /TL/epigenetics2/work/pebert/tools/NucHunter/NucHunter.jar fitpars
callnucs= ${javabase} /TL/epigenetics2/work/pebert/tools/NucHunter/NucHunter.jar callnucs -wrad 150

[Pipeline]
name= DEEPLi
workdir= ${EnvPaths:workdir}

symmfilt= chain_symfilt.py --task symmfilt --min-score 2000 --min-size 25 --chain-file {{inputfile}} --chrom {chrom} --output-file {{outputfile}}
mrgblocks= gunzip -c {inputfiles} | sort -V -k 5 | gzip > {outputfile}
normblocks= chain_symfilt.py --task normmap --map-file {inputfile} --output-file {outputfile} --min-size 150
hsa_blocks= gunzip -c {inputfile} | cut -f 1,2,3,5 | sort -V -k1,2 > {outputfile}
mmu_blocks= gunzip -c {inputfile} | awk -v OFS="\\t" '{{print $$6,$$7,$$8,$$5}}' | sort -V -k1,2 > {outputfile}

bwtobg= bigWigToBedGraph {{inputfile}} stdout | sed 's/^/chr/' | egrep "^chr[0-9XY]+\s" | sort -V -k1,2 | gzip > {{outputfile}}
hsa_scores= bedtools map -c 4 -o mean -null "N/A" -a ${workdir}/chain/hg19_to_mm10.150.hsa_blocks.bed -b {{inputfile}} > {{outputfile}}
mmu_scores= bedtools map -c 4 -o mean -null "N/A" -a ${workdir}/chain/hg19_to_mm10.150.mmu_blocks.bed -b {{inputfile}} > {{outputfile}}

cleangenome= bedtools subtract -nonamecheck -a {{inputfile}} -b ${Refdata:blacklist} | sort -V -k 1,2 > {{outputfile}}
bamfilt= samtools view -b -f 2 -F 1536 -L ${Refdata:cleanreg} -@ 8 -o {outputfile} {inputfile}
countreads= echo "{inputfile}" > {outputfile} && samtools view -c {inputfile} >> {outputfile}
bammerge= samtools merge -r -l 9 -@ 8 {{outputfile}} {{inputfiles}}
bamsample= samtools view -h {fraction} {{inputfile}} | samtools sort -@ 8 -T {prefix} -o {{outputfile}} -m 2G -O BAM
bamidx= samtools index {inputfile} {outputfile}
nucfit= ${NucHunter:fitparams} -NT 8 -pName {SAMPLE[0]} -out {subpath[0][1]}/nuchunter/fit -in {{inputfile}} > /dev/null
nuccall= ${NucHunter:callnucs} -pName {prefix} -ctrl {control} {bamfiles} -out {outdir} -sigma {sigma}
epiccount= epicseg.R getcounts --regions ${Refdata:chromreg} --target {{outputfile}} {bamfiles}
 --pairedend TRUE --binsize 200 --nthreads 16
epicnorm= epicseg.R normalizecounts --counts {inputfile} --nthreads 16
epicseg= epicseg.R segment --nstates 13 --counts {{inputfile}} --regions {path[0]}/01_HepG2_LiHG.counts_refined_regions.bed
 --nthreads 16 --outdir {subpath[0][1]}/segment --prefix {SAMPLE[0]}_
; parameters for DNase peak calling follow suggestion by Anshul Kundaje found here:
; https://groups.google.com/d/msg/macs-announcement/4OCE59gkpKY/rSO5OQx0jr8J
dnasepeak= macs2 callpeak --verbose 0 --treatment {{inputfile}} --name {SAMPLE[0]} --outdir {subpath[0][1]}/macs2/peaks
 --gsize hs --qvalue 0.01 --nomodel --extsize 200 --shift -100 --keep-dup all --call-summits

[Ruffus]
use_threads= True
jobs= 25
verbose= 2
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=5G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=15G,slots_free=8,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[NodeJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=25G,slots_free=16,tmp_free=10G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=10G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
